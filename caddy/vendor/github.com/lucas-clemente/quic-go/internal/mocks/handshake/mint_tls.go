// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lucas-clemente/quic-go/internal/handshake (interfaces: MintTLS)

package mockhandshake

import (
	io "io"
	reflect "reflect"

	mint "github.com/bifurcation/mint"
	gomock "github.com/golang/mock/gomock"
)

// MockMintTLS is a mock of MintTLS interface
type MockMintTLS struct {
	ctrl     *gomock.Controller
	recorder *MockMintTLSMockRecorder
}

// MockMintTLSMockRecorder is the mock recorder for MockMintTLS
type MockMintTLSMockRecorder struct {
	mock *MockMintTLS
}

// NewMockMintTLS creates a new mock instance
func NewMockMintTLS(ctrl *gomock.Controller) *MockMintTLS {
	mock := &MockMintTLS{ctrl: ctrl}
	mock.recorder = &MockMintTLSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockMintTLS) EXPECT() *MockMintTLSMockRecorder {
	return _m.recorder
}

// ComputeExporter mocks base method
func (_m *MockMintTLS) ComputeExporter(_param0 string, _param1 []byte, _param2 int) ([]byte, error) {
	ret := _m.ctrl.Call(_m, "ComputeExporter", _param0, _param1, _param2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComputeExporter indicates an expected call of ComputeExporter
func (_mr *MockMintTLSMockRecorder) ComputeExporter(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ComputeExporter", reflect.TypeOf((*MockMintTLS)(nil).ComputeExporter), arg0, arg1, arg2)
}

// GetCipherSuite mocks base method
func (_m *MockMintTLS) GetCipherSuite() mint.CipherSuiteParams {
	ret := _m.ctrl.Call(_m, "GetCipherSuite")
	ret0, _ := ret[0].(mint.CipherSuiteParams)
	return ret0
}

// GetCipherSuite indicates an expected call of GetCipherSuite
func (_mr *MockMintTLSMockRecorder) GetCipherSuite() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetCipherSuite", reflect.TypeOf((*MockMintTLS)(nil).GetCipherSuite))
}

// Handshake mocks base method
func (_m *MockMintTLS) Handshake() mint.Alert {
	ret := _m.ctrl.Call(_m, "Handshake")
	ret0, _ := ret[0].(mint.Alert)
	return ret0
}

// Handshake indicates an expected call of Handshake
func (_mr *MockMintTLSMockRecorder) Handshake() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Handshake", reflect.TypeOf((*MockMintTLS)(nil).Handshake))
}

// SetCryptoStream mocks base method
func (_m *MockMintTLS) SetCryptoStream(_param0 io.ReadWriter) {
	_m.ctrl.Call(_m, "SetCryptoStream", _param0)
}

// SetCryptoStream indicates an expected call of SetCryptoStream
func (_mr *MockMintTLSMockRecorder) SetCryptoStream(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetCryptoStream", reflect.TypeOf((*MockMintTLS)(nil).SetCryptoStream), arg0)
}

// SetExtensionHandler mocks base method
func (_m *MockMintTLS) SetExtensionHandler(_param0 mint.AppExtensionHandler) error {
	ret := _m.ctrl.Call(_m, "SetExtensionHandler", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetExtensionHandler indicates an expected call of SetExtensionHandler
func (_mr *MockMintTLSMockRecorder) SetExtensionHandler(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetExtensionHandler", reflect.TypeOf((*MockMintTLS)(nil).SetExtensionHandler), arg0)
}

// State mocks base method
func (_m *MockMintTLS) State() mint.State {
	ret := _m.ctrl.Call(_m, "State")
	ret0, _ := ret[0].(mint.State)
	return ret0
}

// State indicates an expected call of State
func (_mr *MockMintTLSMockRecorder) State() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "State", reflect.TypeOf((*MockMintTLS)(nil).State))
}
