// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lucas-clemente/quic-go/internal/handshake (interfaces: TLSExtensionHandler)

package mocks

import (
	reflect "reflect"

	mint "github.com/bifurcation/mint"
	gomock "github.com/golang/mock/gomock"
	handshake "github.com/lucas-clemente/quic-go/internal/handshake"
)

// MockTLSExtensionHandler is a mock of TLSExtensionHandler interface
type MockTLSExtensionHandler struct {
	ctrl     *gomock.Controller
	recorder *MockTLSExtensionHandlerMockRecorder
}

// MockTLSExtensionHandlerMockRecorder is the mock recorder for MockTLSExtensionHandler
type MockTLSExtensionHandlerMockRecorder struct {
	mock *MockTLSExtensionHandler
}

// NewMockTLSExtensionHandler creates a new mock instance
func NewMockTLSExtensionHandler(ctrl *gomock.Controller) *MockTLSExtensionHandler {
	mock := &MockTLSExtensionHandler{ctrl: ctrl}
	mock.recorder = &MockTLSExtensionHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockTLSExtensionHandler) EXPECT() *MockTLSExtensionHandlerMockRecorder {
	return _m.recorder
}

// GetPeerParams mocks base method
func (_m *MockTLSExtensionHandler) GetPeerParams() <-chan handshake.TransportParameters {
	ret := _m.ctrl.Call(_m, "GetPeerParams")
	ret0, _ := ret[0].(<-chan handshake.TransportParameters)
	return ret0
}

// GetPeerParams indicates an expected call of GetPeerParams
func (_mr *MockTLSExtensionHandlerMockRecorder) GetPeerParams() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetPeerParams", reflect.TypeOf((*MockTLSExtensionHandler)(nil).GetPeerParams))
}

// Receive mocks base method
func (_m *MockTLSExtensionHandler) Receive(_param0 mint.HandshakeType, _param1 *mint.ExtensionList) error {
	ret := _m.ctrl.Call(_m, "Receive", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Receive indicates an expected call of Receive
func (_mr *MockTLSExtensionHandlerMockRecorder) Receive(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Receive", reflect.TypeOf((*MockTLSExtensionHandler)(nil).Receive), arg0, arg1)
}

// Send mocks base method
func (_m *MockTLSExtensionHandler) Send(_param0 mint.HandshakeType, _param1 *mint.ExtensionList) error {
	ret := _m.ctrl.Call(_m, "Send", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (_mr *MockTLSExtensionHandlerMockRecorder) Send(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Send", reflect.TypeOf((*MockTLSExtensionHandler)(nil).Send), arg0, arg1)
}
